name: Terraform Deployment - AWS

on:
  push:
    branches:
      - deploy-aws-terraform

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:

    name: Terraform Deployment - AWS
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/env/hmg
        shell: bash
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq -y

      - name: Get Docker Hub Image Tag
        id: get_image_tag
        run: |
          TAG_IMAGE=$(curl -s "https://registry.hub.docker.com/v2/repositories/fosales/park-tech/tags/" | \
            jq -r '.results | sort_by(.last_updated) | last(.[]).name')
          echo "Latest Docker Hub Image Tag: $TAG_IMAGE"
          echo "tag=$TAG_IMAGE" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # terraform
      - name: Set SSL verification to false
        run: git config --global http.sslVerify false
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init and validate
        run: |
          echo "** Running Terraform Init**"
          terraform init

      - name: Set up environment variables
        run: |
          echo "TF_VAR_uriDatabase=${{ secrets.URI_DATABASE }}" >> .env
          echo "TF_VAR_imagemTag=${{ steps.get_image_tag.outputs.tag }}" >> .env
      - name: debug
        run: |
          ls -la
#      - name: Plan Terraform changes
#        run: terraform plan -var-file=.env -out=tfplan
#
#      - name: Apply Terraform changes
#        run: terraform apply tfplan
#        environment:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
