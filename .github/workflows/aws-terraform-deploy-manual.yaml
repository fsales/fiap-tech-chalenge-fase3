name: AWS - Terraform Deployment

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy-aws:

    name: Terraform Deployment - AWS
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/env/hmg
        shell: bash
    permissions:
      contents: read
      packages: write

    outputs:
      tag-image: ${{ steps.get_image_tag.outputs.tag-image }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install jq -y

      - name: Get Docker Hub Image Tag
        id: get_image_tag
        run: |
          TAG_IMAGE=$(curl -s "https://registry.hub.docker.com/v2/repositories/fosales/park-tech/tags/" | \
            jq -r '.results | sort_by(.last_updated) | last(.[]).name')
          echo "tag-image=$TAG_IMAGE" >> $GITHUB_OUTPUT

      - name: Echo Tag Image Park-tech
        run: |
          echo "park-tech: ${{steps.deploy-aws.outputs.tag-image}}"

  #      - name: Configure AWS credentials
  #        uses: aws-actions/configure-aws-credentials@v4
  #        with:
  #          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #          aws-region: us-west-2
  #
  #      - name: Login to Amazon ECR
  #        id: login-ecr
  #        uses: aws-actions/amazon-ecr-login@v2
  #
  #      - name: Set SSL verification to false
  #        run: git config --global http.sslVerify false
  #
  #      - name: Setup Terraform CLI
  #        uses: hashicorp/setup-terraform@v2.0.2
  #
  #      - name: Terraform init
  #        run: |
  #          echo "** Running Terraform Init**"
  #
  #          export TF_VAR_uriDatabase=$URI_DATABASE
  #          export TF_VAR_imagemTag=$TAG_IMAGE
  #
  #          terraform init
  #
  #        env:
  #          URI_DATABASE: ${{secrets.URI_DATABASE}}
  #          TAG_IMAGE: ${{env.TAG_IMAGE}}
  #
  #      - name: Plan Terraform changes
  #        run: |
  #          echo "** Running Terraform Plan**"
  #
  #          export TF_VAR_uriDatabase=$URI_DATABASE
  #          export TF_VAR_imagemTag=$TAG_IMAGE
  #
  #          terraform plan -input=false -out=tfplan
  #
  #        env:
  #          URI_DATABASE: ${{secrets.URI_DATABASE}}
  #          TAG_IMAGE: ${{env.TAG_IMAGE}}
  #
  #      - name: Terraform Apply
  #        run: |
  #          echo "** Running Terraform Apply**"
  #
  #          export TF_VAR_uriDatabase=$URI_DATABASE
  #          export TF_VAR_imagemTag=$TAG_IMAGE
  #
  #          terraform apply -auto-approve -input=false tfplan
  #        env:
  #          URI_DATABASE: ${{secrets.URI_DATABASE}}
  #          TAG_IMAGE: ${{env.TAG_IMAGE}}

  build-push-image-ecr:
    needs: [ deploy-aws ]

    name: Publish image docker registry
    runs-on: ubuntu-latest

    defaults:
      run:
        #working-directory: park-tech
        shell: bash
    permissions:
      contents: read
      packages: write

    steps:
      - name: Echo Tag Image Park-tech
        env:
          TAG_IMAGE: ${{needs.deploy-aws.outputs.tag-image}}
        run: |
          echo "Tag image park-tech: $TAG_IMAGE"


#      - name: Check out the repo
#        uses: actions/checkout@v4
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: us-west-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2

#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        env:
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: park-tech
#          IMAGE_TAG: ${{env.TAG_IMAGE}}
#        run: |
#          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#        working-directory: park-tech