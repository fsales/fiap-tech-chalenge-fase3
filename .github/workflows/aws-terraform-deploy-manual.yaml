name: AWS - Terraform Deployment

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-push-image-ecr:

    name: Publish image ECR
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
    permissions:
      contents: read
      packages: write

    outputs:
      tag-image: ${{ steps.get_image_tag.outputs.tag-image }}

    steps:

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Get Docker Hub Image Tag
        id: get_image_tag
        run: |
          echo "tag-image=latest" >> $GITHUB_OUTPUT

      - name: Echo Tag Image Park-tech
        run: |
          echo "park-tech: ${{steps.get_image_tag.outputs.tag-image}}"

      # autentica na aws
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      # executa o terraform para fazer a criação do ecr
      - name: Set SSL verification to false
        run: git config --global http.sslVerify false

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init ECR
        run: |
          echo "** Running Terraform Init**"
          terraform init
        working-directory: terraform/ecr/env/hmg

      - name: Plan Terraform changes ECR
        run: |
          echo "** Running Terraform Plan**"  
          terraform plan -input=false -out=tfplan
        working-directory: terraform/ecr/env/hmg


      - name: Terraform Apply ECR
        run: |
          echo "** Running Terraform Apply**"
          terraform apply -auto-approve -input=false tfplan
        working-directory: terraform/ecr/env/hmg

      ## realizar o build e push
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: park-tech
          IMAGE_TAG: ${{steps.get_image_tag.outputs.tag-image}}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        working-directory: park-tech

  deploy-aws:
    needs: [ build-push-image-ecr ]
    name: Terraform Deployment - AWS
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: terraform/ecs/env/hmg
        shell: bash
    permissions:
      contents: read
      packages: write

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Echo Tag Image Park-tech
        run: |
          echo "park-tech: ${{needs.build-push-image-ecr.outputs.tag-image}}"
      

      ###########################################################
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Set SSL verification to false
        run: git config --global http.sslVerify false

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v2.0.2

      - name: Terraform init ECS
        run: |
          echo "** Running Terraform Init**"
          
          export TF_VAR_uriDatabase=$URI_DATABASE
          export TF_VAR_imagemTag=$TAG_IMAGE
          export TF_VAR_parktechNasicAuthName=$PARK_TECH_BASIC_AUTH_NAME
          export TF_VAR_parktechNasicAuthPassword=$PARK_TECH_BASIC_AUTH_PASSWORD
          export TF_VAR_idConexaoPeeringMongoDB=$ID_CONEXAO_PEERING_MONGODB
          
          terraform init

        env:
          URI_DATABASE: ${{secrets.URI_DATABASE}}
          TAG_IMAGE: ${{needs.build-push-image-ecr.outputs.tag-image}}
          PARK_TECH_BASIC_AUTH_NAME: ${{secrets.PARK_TECH_BASIC_AUTH_NAME}}
          PARK_TECH_BASIC_AUTH_PASSWORD: ${{secrets.PARK_TECH_BASIC_AUTH_PASSWORD}}
          ID_CONEXAO_PEERING_MONGODB: ${{secrets.ID_CONEXAO_PEERING_MONGODB}}

      - name: Plan Terraform changes ECS
        run: |
          echo "** Running Terraform Plan**"
          
          export TF_VAR_uriDatabase=$URI_DATABASE
          export TF_VAR_imagemTag=$TAG_IMAGE
          export TF_VAR_parktechNasicAuthName=$PARK_TECH_BASIC_AUTH_NAME
          export TF_VAR_parktechNasicAuthPassword=$PARK_TECH_BASIC_AUTH_PASSWORD
          export TF_VAR_idConexaoPeeringMongoDB=$ID_CONEXAO_PEERING_MONGODB
          
          terraform plan -input=false -out=tfplan

        env:
          URI_DATABASE: ${{secrets.URI_DATABASE}}
          TAG_IMAGE: ${{needs.build-push-image-ecr.outputs.tag-image}}
          PARK_TECH_BASIC_AUTH_NAME: ${{secrets.PARK_TECH_BASIC_AUTH_NAME}}
          PARK_TECH_BASIC_AUTH_PASSWORD: ${{secrets.PARK_TECH_BASIC_AUTH_PASSWORD}}
          ID_CONEXAO_PEERING_MONGODB: ${{secrets.ID_CONEXAO_PEERING_MONGODB}}

      - name: Terraform Apply ECS
        run: |
          echo "** Running Terraform Apply**"
          
          export TF_VAR_uriDatabase=$URI_DATABASE
          export TF_VAR_imagemTag=$TAG_IMAGE
          export TF_VAR_parktechNasicAuthName=$PARK_TECH_BASIC_AUTH_NAME
          export TF_VAR_parktechNasicAuthPassword=$PARK_TECH_BASIC_AUTH_PASSWORD
          export TF_VAR_idConexaoPeeringMongoDB=$ID_CONEXAO_PEERING_MONGODB
          
          terraform apply -auto-approve -input=false tfplan
        env:
          URI_DATABASE: ${{secrets.URI_DATABASE}}
          TAG_IMAGE: ${{needs.build-push-image-ecr.outputs.tag-image}}
          PARK_TECH_BASIC_AUTH_NAME: ${{secrets.PARK_TECH_BASIC_AUTH_NAME}}
          PARK_TECH_BASIC_AUTH_PASSWORD: ${{secrets.PARK_TECH_BASIC_AUTH_PASSWORD}}
          ID_CONEXAO_PEERING_MONGODB: ${{secrets.ID_CONEXAO_PEERING_MONGODB}}